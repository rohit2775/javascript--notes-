
1. Array Creation & Checking
🔹 Array.isArray(value)

Use: Checks whether the given value is an array or not.
Useful because in JavaScript, many things are objects, so this confirms if it’s an actual array.

Array.isArray([1,2,3]); // true ✅
Array.isArray("Rohit"); // false ❌


📘 Use case: When you receive data from API or user input and want to ensure it’s an array.

🔹 Array.from(object)

Use: Converts array-like or iterable objects (like strings, NodeList, Set, etc.) into a real array.

Array.from("Rohit"); 
// Output: ['R','o','h','i','t']


📘 Use case:
When you select multiple DOM elements (document.querySelectorAll()), it returns NodeList (not an array).
Use Array.from() to convert it so you can use map(), filter(), etc.

🔹 Array.of(...items)

Use: Creates a new array from the provided arguments.

Array.of(1,2,3); 
// Output: [1,2,3]


📘 Use case:
When you want to dynamically create an array from a list of values.

➕ 2. Add / Remove Elements
🔹 push(element)

Use: Adds an element to the end of the array.

let arr = [1,2];
arr.push(3);
console.log(arr); // [1,2,3]


📘 Real-life example: Adding an item to a shopping cart.

🔹 pop()

Use: Removes the last element from the array.

arr.pop();
console.log(arr); // [1,2]


📘 Real-life example: Removing the last item added to a cart.

🔹 unshift(element)

Use: Adds an element to the start of the array.

arr.unshift(0);
console.log(arr); // [0,1,2]


📘 Real-life example: Adding a person at the start of a queue.

🔹 shift()

Use: Removes the first element from the array.

arr.shift();
console.log(arr); // [1,2]


📘 Real-life example: Serving the first person in a queue.

🔹 splice(start, deleteCount, ...items)

Use: Can add, remove, or replace elements at any position.
⚠️ This modifies the original array.

let arr2 = [1,2,3,4];
arr2.splice(1,2,99); 
console.log(arr2); // [1,99,4]


Explanation:

1 → start index

2 → number of elements to delete

99 → element to insert

🔹 slice(start, end)

Use: Returns a copy of a portion of an array (does not change original).

let newArr = [10,20,30,40].slice(1,3);
console.log(newArr); // [20,30]


📘 Use case: Getting a part of an array for pagination.

🔹 concat()

Use: Combines two or more arrays into a new array.

let merged = [1,2].concat([3,4]);
console.log(merged); // [1,2,3,4]


📘 Use case: Combining different sets of data.

🔍 3. Searching & Checking Elements
🔹 indexOf(value)

Use: Returns the first index of the element. Returns -1 if not found.

[1,2,3,2].indexOf(2); // 1

🔹 lastIndexOf(value)

Use: Returns the last index of the element.

[1,2,3,2].lastIndexOf(2); // 3

🔹 includes(value)

Use: Checks if the element exists in the array. Returns true/false.

[1,2,3].includes(2); // true


📘 Use case: Validating if a user input or value already exists.

🔹 find(callback)

Use: Returns the first element that satisfies a condition.

let num = [10,20,30].find(x => x > 15);
console.log(num); // 20

🔹 findIndex(callback)

Use: Returns the index of the first element that satisfies a condition.

[10,20,30].findIndex(x => x > 15); // 1

🔹 every(callback)

Use: Checks if all elements satisfy the condition.

[2,4,6].every(x => x % 2 === 0); // true

🔹 some(callback)

Use: Checks if any element satisfies the condition.

[1,2,3].some(x => x > 2); // true

🔁 4. Looping / Iteration
🔹 forEach(callback)

Use: Executes a function for each element, but does not return anything.

[1,2,3].forEach(x => console.log(x * 2));

🔹 map(callback)

Use: Applies a function on each element and returns a new array.

let doubled = [1,2,3].map(x => x * 2);
console.log(doubled); // [2,4,6]

🔹 filter(callback)

Use: Returns a new array of elements that satisfy a condition.

let even = [1,2,3,4].filter(x => x % 2 === 0);
console.log(even); // [2,4]

🔹 reduce(callback, initialValue)

Use: Combines all elements into a single value.

let sum = [1,2,3,4].reduce((total, x) => total + x, 0);
console.log(sum); // 10


📘 Real-life: Calculating total price in a cart.

🔹 reduceRight(callback)

Use: Same as reduce, but runs from right to left.

[1,2,3].reduceRight((a,b)=>a-b); // 0

🔄 5. Sorting / Reversing
🔹 sort(compareFn)

Use: Sorts elements of an array. Default is string sorting, so for numbers, use a compare function.

let nums = [40,10,30];
nums.sort((a,b) => a - b);
console.log(nums); // [10,30,40]

🔹 reverse()

Use: Reverses the order of elements.

[1,2,3].reverse(); // [3,2,1]



 if want  to better understand in hindi .... 



 1. Array Creation & Checking
🔹 Array.isArray(value)

Use: Ye check karta hai ki jo value di gayi hai wo array hai ya nahi.
Kyunki JS me sab kuch object hota hai, isse sure karne ke liye ye method use hota hai.

Array.isArray([1,2,3]); // true  ✅ ye ek array hai
Array.isArray("Rohit"); // false ❌ ye ek string hai


📘 Use case:
Jab API ya user se data mile, aur tumhe check karna ho ki wo array hai ya single value.

🔹 Array.from(object)

Use: Ye kisi bhi array-like ya iterable object (like string, NodeList, Set, etc.) ko array me convert karta hai.

Array.from("Rohit"); 
// Output: ['R','o','h','i','t']


📘 Use case:
DOM me jab hum document.querySelectorAll() se NodeList nikalte hain, wo array nahi hota.
Use Array.from() se array me convert karte hain taaki hum map(), filter() use kar sakein.

🔹 Array.of(...items)

Use: Ye given arguments se ek naya array banata hai.

Array.of(1,2,3); 
// Output: [1,2,3]


📘 Use case:
Jab hume dynamically elements se array banana ho bina kisi type confusion ke.

➕ 2. Add / Remove Elements
🔹 push(element)

Use: Ye array ke end me ek element add karta hai.

let arr = [1,2];
arr.push(3);
console.log(arr); // [1,2,3]


📘 Real-life: Shopping cart me item add karna.

🔹 pop()

Use: Ye last element remove karta hai.

arr.pop();
console.log(arr); // [1,2]


📘 Real-life: Cart se last added product remove karna.

🔹 unshift(element)

Use: Ye array ke start me element add karta hai.

arr.unshift(0);
console.log(arr); // [0,1,2]


📘 Real-life: Queue ke starting me new entry lagana.

🔹 shift()

Use: Ye first element remove karta hai.

arr.shift();
console.log(arr); // [1,2]


📘 Real-life: Queue ke first person ko remove karna (kaam ho gaya 😄).

🔹 splice(start, deleteCount, ...items)

Use: Ye elements ko remove, replace ya add kar sakta hai.
⚠️ Original array change karta hai.

let arr2 = [1,2,3,4];
arr2.splice(1,2,99); 
console.log(arr2); // [1,99,4]


📘 Explanation:

1 → start index

2 → deleteCount

99 → new element
So index 1 aur 2 delete hue (2,3) aur 99 add hua.

🔹 slice(start, end)

Use: Array ke ek portion ka copy return karta hai (original change nahi hoti).

let newArr = [10,20,30,40].slice(1,3);
console.log(newArr); // [20,30]


📘 Use case: Jab array ka ek part chahiye ho — jaise pagination me.

🔹 concat()

Use: 2 ya zyada arrays ko combine karta hai.

let merged = [1,2].concat([3,4]);
console.log(merged); // [1,2,3,4]


📘 Use case: Different arrays ka combined data chahiye.

🔍 3. Searching & Checking Elements
🔹 indexOf(value)

Use: Element ka first index batata hai. Agar nahi milta to -1.

[1,2,3,2].indexOf(2); // 1

🔹 lastIndexOf(value)

Use: Element ka last index batata hai.

[1,2,3,2].lastIndexOf(2); // 3

🔹 includes(value)

Use: Check karta hai ki array me wo value hai ya nahi (true/false).

[1,2,3].includes(2); // true


📘 Use case: Validation ke liye — e.g. check if user input already exists.

🔹 find(callback)

Use: Pehla element return karta hai jo condition ko satisfy karta hai.

let num = [10,20,30].find(x => x > 15);
console.log(num); // 20

🔹 findIndex(callback)

Use: Pehle matching element ka index return karta hai.

[10,20,30].findIndex(x => x > 15); // 1

🔹 every(callback)

Use: Check karta hai sabhi elements condition pass kar rahe hain ya nahi.

[2,4,6].every(x => x % 2 === 0); // true

🔹 some(callback)

Use: Check karta hai ki koi ek element bhi condition pass karta hai ya nahi.

[1,2,3].some(x => x > 2); // true

🔁 4. Looping / Iteration
🔹 forEach(callback)

Use: Har element par function execute karta hai, but return nahi karta.

[1,2,3].forEach(x => console.log(x * 2));

🔹 map(callback)

Use: Har element par function apply karta hai aur new array return karta hai.

let doubled = [1,2,3].map(x => x * 2);
console.log(doubled); // [2,4,6]

🔹 filter(callback)

Use: Jo elements condition pass karte hain, unka naya array banata hai.

let even = [1,2,3,4].filter(x => x % 2 === 0);
console.log(even); // [2,4]

🔹 reduce(callback, initialValue)

Use: Array ke sabhi elements ko combine karke ek single value return karta hai.

let sum = [1,2,3,4].reduce((total, x) => total + x, 0);
console.log(sum); // 10


📘 Real-life: Bill me total price calculate karna.

🔹 reduceRight(callback)

Use: Same as reduce, lekin right to left kaam karta hai.

[1,2,3].reduceRight((a,b)=>a-b); // 0

🔄 5. Sorting / Reversing
🔹 sort(compareFn)

Use: Array ke elements ko sort karta hai (default string wise).
Numerical sorting ke liye compareFn zaroor likhna hota hai.

let nums = [40,10,30];
nums.sort((a,b) => a - b);
console.log(nums); // [10,30,40]

🔹 reverse()

Use: Array ko ulta kar deta hai.

[1,2,3].reverse(); // [3,2,1]
